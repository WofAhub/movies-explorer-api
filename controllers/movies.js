// const –±–∞–∑–∞
const mongoose = require('mongoose');
const Movie = require('../models/movie');

// const –æ—à–∏–±–∫–∏
const {
  NotFoundError,
  ValidationError,
  ForbiddenError,
} = require('../utils/errors');

// –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∏–ª—å–º–æ–≤
module.exports.getMovies = (req, res, next) => {
  const owner = req.user._id;

  Movie
    .find({ owner })
    .populate('owner')
    .then((movies) => {
      res
        .status(200)
        .send(movies);
    })
    .catch((err) => {
      next(err);
    });
};

// –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å–º–∞
module.exports.uploadMovie = (req, res, next) => {
  const {
    country,
    director,
    duration,
    year,
    description,
    image,
    trailerLink,
    thumbnail,
    movieId,
    nameRU,
    nameEN,
  } = req.body;

  Movie
    .create({
      country,
      director,
      duration,
      year,
      description,
      image,
      trailerLink,
      thumbnail,
      movieId,
      nameRU,
      nameEN,
      owner: req.user._id,
    })
    .then((movie) => {
      movie
        .populate('owner');
      res
        .status(200)
        .send(movie);
    })
    .catch((err) => {
      if (err instanceof mongoose.Error.ValidationError) {
        const errorFields = Object.keys(err.errors);
        const errorMessage = err.errors[errorFields[0]].message;

        next(new ValidationError(errorMessage));
      } else {
        next(err);
      }
    });
};

// —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∏–ª—å–º–∞
module.exports.deleteMovie = (req, res, next) => {
  const { movieId } = req.params;

  Movie
    .findById(movieId)
    .orFail(() => {
      throw new NotFoundError('üëÄ –§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω');
    })
    .then((MovieThatIsBeingDeleted) => {
      const idMovie = MovieThatIsBeingDeleted.owner.toString();
      const idUser = req.user._id.toString();
      if (idMovie === idUser) {
        Movie
          .deleteOne(MovieThatIsBeingDeleted)
          .then(() => {
            res
              .status(200)
              .send({ message: '‚ùé –§–∏–ª—å–º —É–¥–∞–ª—ë–Ω' });
          });
      } else {
        throw new ForbiddenError('‚õî –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å–º, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –Ω–µ –í–∞–º–∏');
      }
    })
    .catch((err) => {
      if (err.name === 'CastError') {
        next(new ValidationError('‚ùì –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π id —Ñ–∏–ª—å–º–∞'));
      } else {
        next(err);
      }
    });
};
