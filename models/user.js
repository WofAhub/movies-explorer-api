// const –±–∞–∑–∞
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

// const –æ—à–∏–±–∫–∏
const UnauthorizedError = require('../errors/UnauthorizedError');
const { EMAIL_REGEX } = require('../utils/config');

// —Å—Ö–µ–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const userSchema = new mongoose.Schema({
  name: {
    type: String,
    minlength: [2, '–í –∏–º–µ–Ω–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2-—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–æ 30-—Ç–∏. –°–µ–π—á–∞—Å –º–µ–Ω—å—à–µ 2-—Ö'],
    maxlength: [30, '–í –∏–º–µ–Ω–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–æ 30-—Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤. –°–µ–π—á–∞—Å –±–æ–ª—å—à–µ 30-—Ç–∏'],
    required: true,
  },
  email: {
    type: String,
    unique: true,
    required: true,
    validate: {
      validator: (email) => EMAIL_REGEX.test(email),
      message: 'Email –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É',
    },
  },
  password: {
    type: String,
    required: true,
    select: false,
  },
});

// —Å—Ç–∞—Ç–∏–∫
userSchema.statics.findUserByCredentials = function findUserByCredentials(email, password) {
  return this.findOne({ email }).select('+password')
    .then((user) => {
      if (!user) {
        return Promise.reject(new UnauthorizedError('üîë –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–æ—á—Ç–∞ –∏–ª–∏ –ø–∞—Ä–æ–ª—å'));
      }
      return bcrypt.compare(password, user.password)
        .then((matched) => {
          if (!matched) {
            return Promise.reject(new UnauthorizedError('üîë –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–æ—á—Ç–∞ –∏–ª–∏ –ø–∞—Ä–æ–ª—å'));
          }
          return user;
        });
    });
};

module.exports = mongoose.model('user', userSchema);
